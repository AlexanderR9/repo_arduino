
/////////////////////////// ПИНЫ АРДУИНО /////////////////////////////////////////////

//ЦИФРОВЫЕ входы-выходы:
//Цифровой пин может находиться в двух состояниях, вход и выход. 
//В режиме входа пин может считывать напряжение от 0 до напряжения питания МК, а в режиме выхода – выдавать такое же напряжение.
pinMode(pin_number, mode); //задание режима указанной ноги, значения mode: INPUT, OUTPUT, INPUT_PULLUP (подтянутый к питанию вход)

//По умолчанию все пины сконфигурированы как входы (INPUT), задавать сигналы на пинах можно только в режиме OUTPUT
digitalWrite(pin_number, value); //установка цифрового сигнала на пине, value может принимать значения: HIGH-высокий, LOW-низкий. Также можно использовать цифры 0 и 1 
//Пин, настроенный как OUTPUT, по умолчанию имеет сигнал LOW
//в режиме INPUT сигналы можно считывать с пинов функцией digitalRead(pin), функция возвращает 0, если сигнал низкого уровня, и 1 – если высокого

//Подключение кнопки к цифровому пину происходит следующим образом: пин устанавливается в режим INPUT, т.к. будет принимать сигнал по нажатию кнопки,
//предполагается что у кнопки два контакта, которые замыкаются при нажатии, назовем их К1 и К2,
//Цепь подключения будет следующая: от источника +5В идет провод на К1, от К2 идет провод на цифровой пин, который и отслеживает нажатие кнопки,
//далее в эту схему необходимо добавить подтягивающий резистор 10КОм, соединяем этим резистором К2 и землю ардуино.



//АНАЛОГОВЫЕ входы: (т.е. входы, подключенные к АЦП)
//На платах Ардуино это пины, маркированные буквой А.
//“Аналоговые” пины могут принимать напряжение от 0 (GND) до опорного напряжения и преобразовывать его в цифровое значение
// мы получаем измеренное напряжение в виде числа от 0 до 1023, Функция, которая оцифровывает напряжение, называется analogRead(pin).
//Порядковым номером GPIO: А0 – 14 пин, A1 – 15 пин… А7 – 21
int value1 = analogRead(0);   // считать напряжение с пина A0
int value2 = analogRead(A0);  // считать напряжение с пина A0
int value3 = analogRead(14);  // считать напряжение с пина A0
//Опорное напряжение играет главную роль в измерении аналогового сигнал
analogReference(mode); //изменения источника опорного напряжения mode=DEFAULT(соответствует питанию МК), такой режим установлен по умолчанию
//Значение 1023 функции analogRead() будет соответствовать выбранному опорному напряжению или напряжению выше его
//НЕЛЬЗЯ ПОДАВАТЬ НА ВХОД НАПРЯЖЕНИЕ ВЫШЕ 5.5 Вольт!!!!
//Для измерения постоянного напряжения больше 5 Вольт нужно использовать делитель напряжения на резисторах.



//ШИМ сигнал
// может генерится только с цифрового пина.
// Нужен для плавного управления каким-то процессом, яркость светодиода, мощность обогревателя или скорость вращения моторчика.
// смысл ШИМ - попеременное включение/выключение напряжения, пример: 0.5 сек. работает, 1 сек. не работает
// Для генерации ШИМ у нас есть готовая функция analogWrite(pin, duty)
    pin – пин, являющийся выводом таймера. Для Нано/Уно это пины D3, D5, D6, D9, D10, D11. 
    duty – заполнение ШИМ сигнала. По умолчанию все “выходы” ШИМ у нас 8-битные, то есть duty может принимать значение с “разрешением” 8 бит, а это 0-255
// при генерации ШПИ пин должен быть настроен как OUTPUT
пример: analogWrite(3, analogRead(0)/4); // ШИМ на 3 пин, заполнение берется с аналогового входа A0:  1023/4 = 255 - перевод из одного диапазона в другой









